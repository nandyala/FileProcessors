import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class JarToPomConverter {
    public static void main(String[] args) {
        // Replace these paths with your own
        String jarFolder = "/path/to/jars";
        String pomFile = "/path/to/pom.xml";
        
        try {
            FileWriter writer = new FileWriter(pomFile);
            
            writer.write("<dependencies>\n");
            
            File folder = new File(jarFolder);
            File[] jarFiles = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".jar"));
            
            if (jarFiles != null) {
                for (File jarFile : jarFiles) {
                    String fileName = jarFile.getName();
                    String groupId = getGroupId(fileName);
                    String artifactId = getArtifactId(fileName);
                    String version = getVersion(fileName);
                    
                    writer.write("    <dependency>\n");
                    writer.write("        <groupId>" + groupId + "</groupId>\n");
                    writer.write("        <artifactId>" + artifactId + "</artifactId>\n");
                    writer.write("        <version>" + version + "</version>\n");
                    writer.write("    </dependency>\n");
                }
            }
            
            writer.write("</dependencies>");
            writer.close();
            
            System.out.println("POM file created successfully!");
        } catch (IOException e) {
            System.out.println("Error creating POM file: " + e.getMessage());
        }
    }
    
    private static String getGroupId(String fileName) {
        // Modify this method to return the appropriate groupId for your project
        // You can use different conditions or mappings based on your JAR file names
        
        return "com.example";
    }
    
    private static String getArtifactId(String fileName) {
        // Modify this method to return the appropriate artifactId for your project
        // You can use different conditions or mappings based on your JAR file names
        
        return fileName.replace(".jar", "");
    }
    
    private static String getVersion(String fileName) {
        // Modify this method to return the appropriate version for your project
        // You can use different conditions or mappings based on your JAR file names
        
        return "1.0.0";
    }
}
